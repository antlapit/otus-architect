{
	"info": {
		"_postman_id": "c449b448-a01a-45cd-8342-bdb80ba54a8a",
		"name": "OTUS Architect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Register Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"username\", jsonData['username']);",
									"pm.collectionVariables.set(\"password\", jsonData['password']);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/register/init",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"register",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile (unauthorized)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile (unauthorized)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"     pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('token', response['token']);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile After Sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"if ((!jsonData.profileId || parseInt(jsonData.profileId, 10) <= 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									" }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"firstName\", jsonData['firstName']);",
									"pm.collectionVariables.set(\"lastName\", jsonData['lastName']);",
									"pm.collectionVariables.set(\"email\", jsonData['email']);",
									"pm.collectionVariables.set(\"phone\", jsonData['phone']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"if ((!jsonData.firstName || pm.collectionVariables.get('firstName') !== jsonData.firstName) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"    pm.test(\"Checking profile\", function () {",
									"        pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username'));",
									"        pm.expect(jsonData.firstName).to.eql(pm.collectionVariables.get('firstName'));",
									"        pm.expect(jsonData.lastName).to.eql(pm.collectionVariables.get('lastName'));",
									"        pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('email'));",
									"        pm.expect(jsonData.phone).to.eql(pm.collectionVariables.get('phone'));",
									"    });",
									" }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Password Changing",
			"item": [
				{
					"name": "Register Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"username\", jsonData['username']);",
									"pm.collectionVariables.set(\"password\", jsonData['password']);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/register/init",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"register",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password (unauthorized)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"test\",\n  \"newPassword\": \"test2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/alapitskii/change-password",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"     pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('token', response['token']);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"password\", jsonData['newPassword']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"{{password}}\",\n  \"newPassword\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://arch.homework/otusapp/alapitskii/change-password",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"     pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile Visibility",
			"item": [
				{
					"name": "Register Init 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"username1\", jsonData['username']);",
									"pm.collectionVariables.set(\"password1\", jsonData['password']);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/register/init",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"register",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"     pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('token', response['token']);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username1}}\",\n  \"password\": \"{{password1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Checking profile\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username1'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Init 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"username2\", jsonData['username']);",
									"pm.collectionVariables.set(\"password2\", jsonData['password']);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/register/init",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"register",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"     pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('token', response['token']);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username2}}\",\n  \"password\": \"{{password2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Checking profile\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username2'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Full Order Scenario",
			"item": [
				{
					"name": "USER",
					"item": [
						{
							"name": "Register Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = JSON.parse(pm.request.body.raw);",
											"pm.collectionVariables.set(\"username\", jsonData['username']);",
											"pm.collectionVariables.set(\"password\", jsonData['password']);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{baseUrl}}/otusapp/alapitskii/register/init",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"register",
										"init"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"     pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    const response = pm.response.json();",
											"    pm.collectionVariables.set('token', response['token']);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"if ((!jsonData.accountId) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking profile\", function () {",
											"        pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username'));",
											"        pm.expect(jsonData.money).to.eql(\"0\");",
											"    });",
											" }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ORDER",
					"item": [
						{
							"name": "Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"if ((jsonData.length == 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking order\", function () {",
											"        pm.expect(parseInt(jsonData[0].total)).to.eql(0);",
											"        pm.expect(jsonData[0].status).to.eql('NEW');",
											"        pm.collectionVariables.set('orderId', jsonData[0].orderId);",
											"    });",
											" }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Items 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"productId\": 1,\n    \"quantity\": {{$randomInt}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders/{{orderId}}/add-items",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders",
										"{{orderId}}",
										"add-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order By Id 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"var totalAmount = parseInt(jsonData.total);",
											"if ((totalAmount == 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking order\", function () {",
											"        pm.expect(totalAmount).to.gt(0);",
											"        pm.expect(jsonData.status).to.eql('NEW');",
											"        pm.collectionVariables.set(\"orderAmount\", totalAmount);",
											"    });",
											" }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders/{{orderId}}",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders",
										"{{orderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Items 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"productId\": 2,\n    \"quantity\": {{$randomInt}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders/{{orderId}}/add-items",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders",
										"{{orderId}}",
										"add-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order By Id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"var totalAmount = parseInt(jsonData.total);",
											"var previousAmount = pm.collectionVariables.get(\"orderAmount\");",
											"if ((totalAmount == previousAmount) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking order\", function () {",
											"        pm.expect(totalAmount).to.gt(previousAmount);",
											"        pm.expect(jsonData.status).to.eql('NEW');",
											"        pm.collectionVariables.set(\"orderAmount\", totalAmount);",
											"    });",
											" }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders/{{orderId}}",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders",
										"{{orderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders/{{orderId}}/confirm",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders",
										"{{orderId}}",
										"confirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order By Id 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"var totalAmount = parseInt(jsonData.total);",
											"var previousAmount = pm.collectionVariables.get(\"orderAmount\");",
											"if ((jsonData.status == 'NEW') && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking order\", function () {",
											"        pm.expect(jsonData.status).to.eql('CONFIRMED');",
											"    });",
											" }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/orders/{{orderId}}",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"orders",
										"{{orderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 10;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"",
											"var jsonData = pm.response.json();",
											"if ((jsonData.length == 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking notifications\", function () {",
											"        pm.expect(jsonData[0].orderId).to.eql(pm.collectionVariables.get('orderId'));",
											"        pm.expect(jsonData[0].eventType).to.eql('order.confirmed');",
											"    });",
											" }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/notifications",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PAYMENT",
					"item": [
						{
							"name": "Add Money",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"money\": \"{{orderAmount}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/add-money",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"add-money"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Updated Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"var parsedMoney = parseInt(jsonData.money);",
											"if ((parsedMoney == 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking profile\", function () {",
											"        pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username'));",
											"        pm.expect(parseInt(jsonData.money)).to.eql(parseInt(pm.collectionVariables.get('orderAmount')));",
											"    });",
											" }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 3;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"",
											"var jsonData = pm.response.json();",
											"if ((jsonData.length == 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking bill\", function () {",
											"        pm.expect(parseInt(jsonData[0].total)).to.eql(parseInt(pm.collectionVariables.get('orderAmount')));",
											"        pm.expect(jsonData[0].orderId).to.eql(pm.collectionVariables.get('orderId'));",
											"        pm.expect(jsonData[0].status).to.eql('CREATED');",
											"        pm.collectionVariables.set('billId', jsonData[0].billId);",
											"    });",
											" }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/bills",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"bills"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/bills/{{billId}}/confirm",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"bills",
										"{{billId}}",
										"confirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Updated After Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 10;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"var parsedMoney = parseInt(jsonData.money);",
											"console.log('account money ' + parsedMoney);",
											"if ((parsedMoney > 0) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking profile\", function () {",
											"        pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username'));",
											"        pm.expect(\"\" + parsedMoney).to.eql(\"0\");",
											"    });",
											" }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Notifications After Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var maxNumberOfTries = 10;",
											"var sleepBetweenTries = 5000;",
											"",
											"if (!pm.environment.get(\"collection_tries\")) {",
											"    pm.environment.set(\"collection_tries\", 1);",
											"}",
											"",
											"",
											"var jsonData = pm.response.json();",
											"if ((jsonData.length == 1) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
											"",
											"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
											"     pm.environment.set(\"collection_tries\", tries + 1);",
											"     setTimeout(function() {}, sleepBetweenTries);",
											"     postman.setNextRequest(request.name);",
											" } else {",
											"     pm.environment.unset(\"collection_tries\");",
											"",
											"    pm.test(\"Checking notifications\", function () {",
											"        pm.expect(jsonData[1].orderId).to.eql(pm.collectionVariables.get('orderId'));",
											"        pm.expect(jsonData[1].eventType).to.eql('order.completed');",
											"    });",
											" }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://arch.homework/otusapp/alapitskii/me/notifications",
									"protocol": "http",
									"host": [
										"arch",
										"homework"
									],
									"path": [
										"otusapp",
										"alapitskii",
										"me",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin Orders",
			"item": [
				{
					"name": "Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(pm.request.body.raw);",
									"pm.collectionVariables.set(\"username\", jsonData['username']);",
									"pm.collectionVariables.set(\"password\", jsonData['password']);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{$randomUserName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/register/init-admin",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"register",
								"init-admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var maxNumberOfTries = 3;",
									"var sleepBetweenTries = 5000;",
									"",
									"if (!pm.environment.get(\"collection_tries\")) {",
									"    pm.environment.set(\"collection_tries\", 1);",
									"}",
									"",
									"if ((pm.response.code != 200) && (pm.environment.get(\"collection_tries\") < maxNumberOfTries)) {",
									"     var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);",
									"     pm.environment.set(\"collection_tries\", tries + 1);",
									"     setTimeout(function() {}, sleepBetweenTries);",
									"     postman.setNextRequest(request.name);",
									" } else {",
									"     pm.environment.unset(\"collection_tries\");",
									"",
									"     pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('token', response['token']);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile (not permitted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/otusapp/alapitskii/me/profile",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otusapp",
								"alapitskii",
								"me",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.request.method !== 'GET' && pm.request.size > 0) {",
					"    console.log(\"Request\");",
					"    console.log(JSON.parse(pm.request.body.raw));",
					"}",
					"if (pm.response.responseSize > 0) {",
					"    console.log(\"Response\");       ",
					"    console.log(pm.response.json());",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "username1",
			"value": ""
		},
		{
			"key": "password1",
			"value": ""
		},
		{
			"key": "username2",
			"value": ""
		},
		{
			"key": "password2",
			"value": ""
		},
		{
			"key": "addedMoney",
			"value": ""
		},
		{
			"key": "orderAmount",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "billId",
			"value": ""
		}
	]
}